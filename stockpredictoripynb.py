# -*- coding: utf-8 -*-
"""StockPredictoripynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-aEfZOn1B66cZAKzYnew3rjNP6XBJvJ
"""

# installed kivy to create an android app which is downloadable on smart phones
# imported sklearn dependencies API's
#import kivy
#import quandl

#import nasdaqdatalink


import math
import pandas_datareader as web
import numpy as np
import pandas as pd
!pip install --upgrade pandas

!pip install --upgrade pandas-datareader
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import datetime
import pandas_datareader
pandas_datareader.__version__

stock = 'AAPL'
end_date = input("Enter end date in Y-M-D format: ")

df = web.DataReader(stock, data_source= 'yahoo', start = "2023-07-10", end = end_date)
df

df.shape

plt.figure(figsize=(16,8))
plt.title('Close price history')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price $', fontsize=18)
plt.show

data= df.filter(['Close'])
dataset = data.values
training_data_len = math.ceil(len(dataset)*.8)
training_data_len

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data= scaler.fit_transform(dataset)
scaled_data

train_data = scaled_data[0:training_data_len, :]
x_train=[]
y_train=[]

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))
x_train.shape

model = Sequential()
model.add(LSTM(50, return_sequences= True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=1)

test_data = scaled_data[training_data_len - 60:, :]
x_test= []
y_test = dataset[training_data_len:, :]
for i in range (60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

x_test

x_test = np.array(x_test)

x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
predictions

rmse = np.sqrt( np.mean(predictions- y_test)**2)
rmse

train = data[:training_data_len]
valid = data[training_data_len:]
valid['predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show()

valid

stock_quote = web.DataReader(stock, data_source = 'yahoo', start = '2015-07-10', end = '2022-11-28')
new_df = stock_quote.filter(['Close'])
last_60_days = new_df[-60:].values
last_60_days_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
X_test
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

stock_quote2 = web.DataReader(stock, data_source = 'yahoo', start = '2022-07-28', end = '2022-11-28')
print(stock_quote2['Close'])